Type Str @ TEXT, CONST, BINARY, ENCODED, FMT_ANSI, COPY
    word length 
    word alloc
    byte bytes[]
    (word alloc)
        _.init(_m.bytes(alloc), 0, alloc))
        _
    
    From(byte bytes[], word length)
        _.init(_m.copy(bytes, length), length, length))
        _

    Ref(byte bytes[], word length, word alloc, word flags)
        _.init(bytes, length, alloc)
        _ & flags
        ? COPY
            _.bytes = _m.copy(_.bytes, _.length)
        _ 

    CstrRef(C.Charptr cstr)
        i64 len = C.strlen(cstr)
        Str.init(_, bytes, len, len+1)
        _ & CONST
        _

TextCharFilter(byte b[i64 length])
    loop(b for length)
        ? _ < 32 and _ not '\r', '\n', '\t'
            return false
    true

reset()
    _.length = 0
    @

wipe()
    C.memset(_.bytes, 0, _.length)    
    @

toFd(i32 fd)
   C.write(fd, _.bytes, _.length) 

add(byte b[], i64 length)
    i64 len = length 
    i64 remaining = _.alloc - _.length
    ? length > remaining
        len = remaining   
        s & ERROR
    | len > 0
        C.memcpy(_s.bytes + _.length, b, len)
        _.length += len
    else
        0

addCstr(C.Charptr cstr)
    add(cstr, C.strlen(cstr))

cstr(MemCh m)
    ? TextCharFilter(_.bytes, _.length)
        byte b
        ? _.alloc == _.length+1
            b = _.bytes
        | 
            b = m.copy(_.bytes, _.length+1)
        b as C.Charptr
    null

clone(MemCh m, word alloc)
    Str s = m.alloc(Str)
    byte bytes[] = M.bytes(m, alloc)
    word len = _.length
    ? _.length > alloc
        s & ERROR
        len = alloc
    C.memcpy(bytes, _.bytes, len)
    Str.init(s, s, bytes, len, alloc)
    s

init(byte bytes[], word length, word alloc)
    _.type.of = TYPE_STR
    _.bytes = bytes
    _.length = length
    _.alloc = alloc
