> Caneka

Caneka is a language toolset written in C, for the main purpose of writing
Domain Specific Langauges, and producing minimal yet scalable runtimes.

It is memory managed with it's own manually-run garbage collector, and focuses
on Cycle-Oriented-Programming as the main paradigm.

see link=caneka.org(https://caneka.org) for more details.

>> Build Instructions

Canka requires a small build program to be compiled, which can then build the
rest of the system by launching other processes.

    ./scripts/make.sh

Further configuration can be specified at the top of
link=build_config.h(./build_config.h)

To rebuild the code, the build command can be run directly:

   ./build/build

However, it does not detect changes to header files yet, so it is necessary to
run the full `make.sh` script to rebuild everything if header files are
changed.

>> Build Status

Currently the system builds and runs on FreeBSD and Linux, and is expected to
build on any POSIX compatible operating system, including Mac, Windows, iOS,
and Android, though these platforms are untested.

The current featureset, covers all of the expected type system, and most of the
network server system, with the only elements remaining in the
link=persist(./src/persist) module, which controls passporting and file
persistance and session io, including cryptography.

>> Tests

Tests can be found in the `tests` folder and are runnable from the `caneka`
binary with the argument `test`.

Output is also regularly commited to link=dist/test_run.txt(./dist/test_run.txt)

>> Run Tests

Tests can be run using the following command

    ./build/caneka test

>> Run Network Server

For example, on port 8000

    ./build/caneka serve=port:8000 

## Key Source Files

Folder Layout:

 - link=include(./include/) - All include files for C sources.
 - link=core(./core/) - Data Structures and memory management system. String,
   Span, Table, MemCtx, etc.
 - link=tests(./tests/) - All tests for each module.
 - link=parser(./parser/) - Parser system, Roebling, Match, Range, etc.
 - link=formats(./formats/) - Formats that the parser currently supports, HTTP,
   XML, Oset, etc.
 - link=persist(./persist/) - File persistance and session context.
 - link=serve(./serve/) - Network server, CycleServe.
 - link=apps(./apps/) - Example app with necessary configuration to run a
   CycleServe instance.
 - link=main.c(./main.c) - Example binary which runs tests and the example app.


Here is a list of the cornerstone source code files for the basics of the
system, each has a comment at the top about it's purpose and related source
code files:

- link=include/caneka.h(./include/caneka.h) - Main include. This defines the types
  and structs for the runtime-polymorphic type system, and all of Caneka.

- link=include/mem.h(./include/mem.h) - Memory Context. This is the manually-run
  garbage collector.

- link=include/span.h(./include/span.h) - Data Strucutre for slab allocation of
  segmented arrays. This is the main work-horse data structure for storing and
  retrieving data, Table is biult on top of this.

- link=include/string_cnk.h(./include/string_cnk.h) - Data Strucutre for slab
  allocation of segmented arrays. This is the main work-horse data structure
  for storing and retrieving data, Table is biult on top of this.

- link=include/debug.h(./include/debug.h) - Configuration file for showing
  debugging information, the debug flags are located in core/debug.c.

- link=main.c(./main.c) - Example and test runner. This file is mostly an example
  Caneka application, and it runs the tests

>> Debug Flags

The debug flags are contained in link=./src/core/debug.c(./src/core/debug.c)
setting them to colors will show details of each module as it runs, in an
example app or test.

For example, changing the value of DEBUG_PATMATCH from 0 to COLOR_YELLOW, will
print out lots of details about each pattern matched by the Roebling module, in
the color yellow.

    src/core/debug.c line 8: int DEBUG_PATMATCH = COLOR_YELLOW;

>> Licence

BSD 3 Clause: link=licence file(./LICENCE)

Caneka is a brand of Compare Basic, read more at
link=comparebasic.com(https://comparebasic.com)
